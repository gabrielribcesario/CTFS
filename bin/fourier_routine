#!/bin/bash

# https://labex.io/tutorials/shell-bash-getopt-391993
OPTS=$(getopt -o t:d:a:p:f:e:h --long period:,dc:,amplitude:,phase:,function:,tolerance:,help -n 'fourier_routine' -- "$@")
if [ $? -ne 0 ]; then
    echo "Internal error! Failure to get optional arguments." >&2
    exit 1
fi

eval set -- "$OPTS"

# Initialize variables
PERIOD="1.0" # Period t_0 [s]
DC="0.0" # DC component
AMPLITUDE="1.0" # Amplitude
PHASE="0.0" # Phase [rad/s]
FUNCTION="SINE" # Function. Options are: sine; square; saw; triangle.
TOLERANCE="0.1" # Stopping criteria (RMSE < tol)
HELP=false

# Parse optional arguments
while true; do
    case "$1" in
        -t | --period)
            PERIOD="$2"
            if (($(bc -l <<< "$PERIOD <= 0.0"))); then
                echo "Cannot validate argument on parameter 'PERIOD':"\
                     "The argument '$PERIOD' cannot be validated because"\
                     "its value is not greater than zero." >&2
                exit 1
            fi
            shift 2
            ;;
        -d | --DC)
            DC="$2"
            shift 2
            ;;
        -a | --amplitude)
            AMPLITUDE="$2"
            shift 2
            ;;
        -p | --phase)
            PHASE="$2"
            shift 2
            ;;
        -e | --tolerance)
            TOLERANCE="$2"
            if (($(bc -l <<< "$TOLERANCE <= 0.0"))); then
                echo "Cannot validate argument on parameter 'TOLERANCE':"\
                     "The argument '$TOLERANCE' cannot be validated because"\
                     "its value is not greater than zero." >&2
                exit 1
            fi
            shift 2
            ;;
        -f | --function)
            FUNCTION="$2"
            FUNCTION=${FUNCTION^^}
            case "$FUNCTION" in
                "SIN" | "SINE")
                    FUNCTION="SINE"
                    ;;
                "SQR" | "SQUARE")
                    FUNCTION="SQUARE"
                    ;;
                "SAW" | "SAWTOOTH")
                    FUNCTION="SAWTOOTH"
                    ;;
                "TRI" | "TRIANGLE")
                    FUNCTION="TRIANGLE"
                    ;;
                *)
                    echo "Cannot validate argument on parameter 'FUNC':"\
                         "The argument '$FUNCTION' does not belong to the set"\
                         "'SIN, SINE, SQR, SQUARE, SAW, SAWTOOTH, TRI, TRIANGLE'" >&2
                    exit 1
                    ;;
            esac
            shift 2
            ;;
        -h | --help)
            HELP=true
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Internal error! Failed to parse options." >&2
            exit 1
            ;;
    esac
done

if ($HELP); then
    echo "Options:"
    echo "  -t, --period             Period [s] (> 0.0) of the periodic function. Default is 1.0[s]."
    echo "  -d, --dc                 DC component of the periodic function. Default is 0.0."
    echo "  -a, --amplitude          Amplitude of the periodic function. Default is 1.0."
    echo "  -p, --phase              Phase shift [rad] of the periodic function. Default is 0.0[rad]."
    echo "  -f, --function           Case insensitive name of the periodic function. Options are: SIN or SINE; SQR or SQUARE;"
    echo "                           SAW or SAWTOOTH; TRI or TRIANGLE. Default is SINE."
    echo "  -e, --tolerance          Tolerance (> 0.0) for the stopping criteria. Default is 0.1."
    exit 0
fi

# cd to script
cd "$(dirname "$0")"

# Compile executable
mkdir -p ../build
cd ../build
if [ ! -f "ctfs" ]; then
    echo "Compiling executable..."
    gfortran -o ctfs ../src/functions.f95 ../src/fourier.f95 ../src/ctfs.f95 -O3
    if [ $? -ne 0 ]; then
        echo "Internal error! Compilation failed." >&2
        exit 1
    fi
    echo "Done."
fi

# Run analysis
echo "Running calculations..."
echo "|   Period: $PERIOD [s]"
echo "|   DC: $DC"
echo "|   Amplitude: $AMPLITUDE"
echo "|   Phase: $PHASE [rad]"
echo "|   Function: $FUNCTION"
echo "|   Tolerance: $TOLERANCE"
./ctfs "$PERIOD" "$DC" "$AMPLITUDE" "$PHASE" "$FUNCTION" "$TOLERANCE"
if [ $? -ne 0 ]; then
    echo "Internal error! Failed to complete the calculations." >&2
    exit 1
fi
echo "Done."

# Move output
mkdir -p "$FUNCTION/data" "$FUNCTION/figures"
rm -f "$FUNCTION/data/*.dat"
mv -t "$FUNCTION/data" *.dat
cd ..

# Create and activate venv
if [ ! -d "ctfs" ]; then
    ./bin/create_venv
    if [ $? -ne 0 ]; then
        exit 1
    fi
fi
echo "Activating venv..."
source ctfs/bin/activate
if [ $? -ne 0 ]; then
    echo "Internal error! Could not activate the virtual environment." >&2
    exit 1
fi
echo "Done."

# Plot output of calculations
cd bin
echo "Running analysis..."
python3 -m analysis -t "$PERIOD" -d "$DC" -a "$AMPLITUDE" -p "$PHASE" -f "$FUNCTION" -e "$TOLERANCE"
if [ $? -ne 0 ]; then
    echo "Internal error! Failed to plot the results." >&2
    exit 1
fi
echo "Done."

exit 0